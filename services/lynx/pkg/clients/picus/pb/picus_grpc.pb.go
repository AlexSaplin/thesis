// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package picus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PicusClient is the client API for Picus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PicusClient interface {
	GetFunctionLogs(ctx context.Context, in *GetFunctionLogsRequest, opts ...grpc.CallOption) (*GetFunctionLogsReply, error)
	StreamFunctionLogs(ctx context.Context, in *StreamFunctionLogsRequest, opts ...grpc.CallOption) (Picus_StreamFunctionLogsClient, error)
}

type picusClient struct {
	cc grpc.ClientConnInterface
}

func NewPicusClient(cc grpc.ClientConnInterface) PicusClient {
	return &picusClient{cc}
}

func (c *picusClient) GetFunctionLogs(ctx context.Context, in *GetFunctionLogsRequest, opts ...grpc.CallOption) (*GetFunctionLogsReply, error) {
	out := new(GetFunctionLogsReply)
	err := c.cc.Invoke(ctx, "/picus.Picus/GetFunctionLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *picusClient) StreamFunctionLogs(ctx context.Context, in *StreamFunctionLogsRequest, opts ...grpc.CallOption) (Picus_StreamFunctionLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Picus_ServiceDesc.Streams[0], "/picus.Picus/StreamFunctionLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &picusStreamFunctionLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Picus_StreamFunctionLogsClient interface {
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type picusStreamFunctionLogsClient struct {
	grpc.ClientStream
}

func (x *picusStreamFunctionLogsClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PicusServer is the server API for Picus service.
// All implementations must embed UnimplementedPicusServer
// for forward compatibility
type PicusServer interface {
	GetFunctionLogs(context.Context, *GetFunctionLogsRequest) (*GetFunctionLogsReply, error)
	StreamFunctionLogs(*StreamFunctionLogsRequest, Picus_StreamFunctionLogsServer) error
	mustEmbedUnimplementedPicusServer()
}

// UnimplementedPicusServer must be embedded to have forward compatible implementations.
type UnimplementedPicusServer struct {
}

func (UnimplementedPicusServer) GetFunctionLogs(context.Context, *GetFunctionLogsRequest) (*GetFunctionLogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunctionLogs not implemented")
}
func (UnimplementedPicusServer) StreamFunctionLogs(*StreamFunctionLogsRequest, Picus_StreamFunctionLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFunctionLogs not implemented")
}
func (UnimplementedPicusServer) mustEmbedUnimplementedPicusServer() {}

// UnsafePicusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PicusServer will
// result in compilation errors.
type UnsafePicusServer interface {
	mustEmbedUnimplementedPicusServer()
}

func RegisterPicusServer(s grpc.ServiceRegistrar, srv PicusServer) {
	s.RegisterService(&Picus_ServiceDesc, srv)
}

func _Picus_GetFunctionLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PicusServer).GetFunctionLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/picus.Picus/GetFunctionLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PicusServer).GetFunctionLogs(ctx, req.(*GetFunctionLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Picus_StreamFunctionLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFunctionLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PicusServer).StreamFunctionLogs(m, &picusStreamFunctionLogsServer{stream})
}

type Picus_StreamFunctionLogsServer interface {
	Send(*LogEntry) error
	grpc.ServerStream
}

type picusStreamFunctionLogsServer struct {
	grpc.ServerStream
}

func (x *picusStreamFunctionLogsServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

// Picus_ServiceDesc is the grpc.ServiceDesc for Picus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Picus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "picus.Picus",
	HandlerType: (*PicusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFunctionLogs",
			Handler:    _Picus_GetFunctionLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFunctionLogs",
			Handler:       _Picus_StreamFunctionLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "picus.proto",
}
