// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: hippo.proto

package hippo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValueType int32

const (
	ValueType_UNKNOWN    ValueType = 0
	ValueType_FLOAT16    ValueType = 1
	ValueType_FLOAT32    ValueType = 2
	ValueType_FLOAT64    ValueType = 3
	ValueType_UINT8      ValueType = 4
	ValueType_UINT16     ValueType = 5
	ValueType_UINT32     ValueType = 6
	ValueType_UINT64     ValueType = 7
	ValueType_INT8       ValueType = 8
	ValueType_INT16      ValueType = 9
	ValueType_INT32      ValueType = 10
	ValueType_INT64      ValueType = 11
	ValueType_COMPLEX64  ValueType = 12
	ValueType_COMPLEX128 ValueType = 13
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "FLOAT16",
		2:  "FLOAT32",
		3:  "FLOAT64",
		4:  "UINT8",
		5:  "UINT16",
		6:  "UINT32",
		7:  "UINT64",
		8:  "INT8",
		9:  "INT16",
		10: "INT32",
		11: "INT64",
		12: "COMPLEX64",
		13: "COMPLEX128",
	}
	ValueType_value = map[string]int32{
		"UNKNOWN":    0,
		"FLOAT16":    1,
		"FLOAT32":    2,
		"FLOAT64":    3,
		"UINT8":      4,
		"UINT16":     5,
		"UINT32":     6,
		"UINT64":     7,
		"INT8":       8,
		"INT16":      9,
		"INT32":      10,
		"INT64":      11,
		"COMPLEX64":  12,
		"COMPLEX128": 13,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_hippo_proto_enumTypes[0].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_hippo_proto_enumTypes[0]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_hippo_proto_rawDescGZIP(), []int{0}
}

type Shape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []int64 `protobuf:"varint,1,rep,packed,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Shape) Reset() {
	*x = Shape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hippo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shape) ProtoMessage() {}

func (x *Shape) ProtoReflect() protoreflect.Message {
	mi := &file_hippo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shape.ProtoReflect.Descriptor instead.
func (*Shape) Descriptor() ([]byte, []int) {
	return file_hippo_proto_rawDescGZIP(), []int{0}
}

func (x *Shape) GetValue() []int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

type Tensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  ValueType `protobuf:"varint,1,opt,name=Type,proto3,enum=hippo.ValueType" json:"Type,omitempty"`
	Shape *Shape    `protobuf:"bytes,2,opt,name=Shape,proto3" json:"Shape,omitempty"`
	Data  []byte    `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *Tensor) Reset() {
	*x = Tensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hippo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tensor) ProtoMessage() {}

func (x *Tensor) ProtoReflect() protoreflect.Message {
	mi := &file_hippo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tensor.ProtoReflect.Descriptor instead.
func (*Tensor) Descriptor() ([]byte, []int) {
	return file_hippo_proto_rawDescGZIP(), []int{1}
}

func (x *Tensor) GetType() ValueType {
	if x != nil {
		return x.Type
	}
	return ValueType_UNKNOWN
}

func (x *Tensor) GetShape() *Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *Tensor) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelID string    `protobuf:"bytes,1,opt,name=ModelID,proto3" json:"ModelID,omitempty"`
	Tensors []*Tensor `protobuf:"bytes,2,rep,name=Tensors,proto3" json:"Tensors,omitempty"`
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hippo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hippo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_hippo_proto_rawDescGZIP(), []int{2}
}

func (x *RunRequest) GetModelID() string {
	if x != nil {
		return x.ModelID
	}
	return ""
}

func (x *RunRequest) GetTensors() []*Tensor {
	if x != nil {
		return x.Tensors
	}
	return nil
}

type RunReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tensors []*Tensor `protobuf:"bytes,1,rep,name=Tensors,proto3" json:"Tensors,omitempty"`
}

func (x *RunReply) Reset() {
	*x = RunReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hippo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunReply) ProtoMessage() {}

func (x *RunReply) ProtoReflect() protoreflect.Message {
	mi := &file_hippo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunReply.ProtoReflect.Descriptor instead.
func (*RunReply) Descriptor() ([]byte, []int) {
	return file_hippo_proto_rawDescGZIP(), []int{3}
}

func (x *RunReply) GetTensors() []*Tensor {
	if x != nil {
		return x.Tensors
	}
	return nil
}

var File_hippo_proto protoreflect.FileDescriptor

var file_hippo_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x68, 0x69, 0x70, 0x70, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x68,
	0x69, 0x70, 0x70, 0x6f, 0x22, 0x1d, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x66, 0x0a, 0x06, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x24, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x68, 0x69,
	0x70, 0x70, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x68, 0x69, 0x70, 0x70, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x52, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x0a, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x07, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x69, 0x70, 0x70, 0x6f, 0x2e, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x52, 0x07, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x33, 0x0a, 0x08,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x69, 0x70, 0x70,
	0x6f, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x07, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x2a, 0xb8, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x46, 0x4c, 0x4f, 0x41, 0x54, 0x31, 0x36, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4c, 0x4f,
	0x41, 0x54, 0x33, 0x32, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x36,
	0x34, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49,
	0x4e, 0x54, 0x33, 0x32, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34,
	0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05,
	0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32,
	0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x0b, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x36, 0x34, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x31, 0x32, 0x38, 0x10, 0x0d, 0x32, 0x32, 0x0a, 0x05,
	0x48, 0x69, 0x70, 0x70, 0x6f, 0x12, 0x29, 0x0a, 0x03, 0x52, 0x75, 0x6e, 0x12, 0x11, 0x2e, 0x68,
	0x69, 0x70, 0x70, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x68, 0x69, 0x70, 0x70, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hippo_proto_rawDescOnce sync.Once
	file_hippo_proto_rawDescData = file_hippo_proto_rawDesc
)

func file_hippo_proto_rawDescGZIP() []byte {
	file_hippo_proto_rawDescOnce.Do(func() {
		file_hippo_proto_rawDescData = protoimpl.X.CompressGZIP(file_hippo_proto_rawDescData)
	})
	return file_hippo_proto_rawDescData
}

var file_hippo_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_hippo_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_hippo_proto_goTypes = []interface{}{
	(ValueType)(0),     // 0: hippo.ValueType
	(*Shape)(nil),      // 1: hippo.Shape
	(*Tensor)(nil),     // 2: hippo.Tensor
	(*RunRequest)(nil), // 3: hippo.RunRequest
	(*RunReply)(nil),   // 4: hippo.RunReply
}
var file_hippo_proto_depIdxs = []int32{
	0, // 0: hippo.Tensor.Type:type_name -> hippo.ValueType
	1, // 1: hippo.Tensor.Shape:type_name -> hippo.Shape
	2, // 2: hippo.RunRequest.Tensors:type_name -> hippo.Tensor
	2, // 3: hippo.RunReply.Tensors:type_name -> hippo.Tensor
	3, // 4: hippo.Hippo.Run:input_type -> hippo.RunRequest
	4, // 5: hippo.Hippo.Run:output_type -> hippo.RunReply
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_hippo_proto_init() }
func file_hippo_proto_init() {
	if File_hippo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hippo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hippo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hippo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hippo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hippo_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hippo_proto_goTypes,
		DependencyIndexes: file_hippo_proto_depIdxs,
		EnumInfos:         file_hippo_proto_enumTypes,
		MessageInfos:      file_hippo_proto_msgTypes,
	}.Build()
	File_hippo_proto = out.File
	file_hippo_proto_rawDesc = nil
	file_hippo_proto_goTypes = nil
	file_hippo_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HippoClient is the client API for Hippo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HippoClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunReply, error)
}

type hippoClient struct {
	cc grpc.ClientConnInterface
}

func NewHippoClient(cc grpc.ClientConnInterface) HippoClient {
	return &hippoClient{cc}
}

func (c *hippoClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunReply, error) {
	out := new(RunReply)
	err := c.cc.Invoke(ctx, "/hippo.Hippo/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HippoServer is the server API for Hippo service.
type HippoServer interface {
	Run(context.Context, *RunRequest) (*RunReply, error)
}

// UnimplementedHippoServer can be embedded to have forward compatible implementations.
type UnimplementedHippoServer struct {
}

func (*UnimplementedHippoServer) Run(context.Context, *RunRequest) (*RunReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}

func RegisterHippoServer(s *grpc.Server, srv HippoServer) {
	s.RegisterService(&_Hippo_serviceDesc, srv)
}

func _Hippo_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HippoServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hippo.Hippo/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HippoServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hippo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hippo.Hippo",
	HandlerType: (*HippoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Hippo_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hippo.proto",
}
