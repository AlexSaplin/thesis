"""
Django settings for django_server project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Include "apps" subfolder to PATH in order to include apps stored there
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(0, os.path.join(BASE_DIR, 'gorilla_pb'))

GOOGLE_OAUTH_CLIENT_ID = os.getenv('GOOGLE_OAUTH_CLIENT_ID')
FACEBOOK_OAUTH_SECRET = os.getenv('FACEBOOK_OAUTH_SECRET')
YANDEX_KASSA_ACCOUNT_ID = os.getenv('YANDEX_KASSA_ACCOUNT_ID')
YANDEX_KASSA_SECRET = os.getenv('YANDEX_KASSA_SECRET')
GORILLA_TARGET = os.getenv('GORILLA_TARGET')
ARDEA_TARGET = os.getenv('ARDEA_TARGET')
STRIPE_SECRET = os.getenv('STRIPE_SECRET')
STRIPE_PRICE_ID = os.getenv('STRIPE_PRICE_ID')
NEW_USER_STARTING_BALANCE = float(os.getenv('NEW_USER_STARTING_BALANCE', '0.0'))

import grpc
from gorilla_pb.gorilla_pb2_grpc import GorillaStub
from ardea_pb.ardea_pb2_grpc import ArdeaStub

GORILLA_STUB = GorillaStub(grpc.insecure_channel(GORILLA_TARGET))

ARDEA_STUB = ArdeaStub(grpc.insecure_channel(ARDEA_TARGET))


MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_ROOT = os.path.join(BASE_DIR, 'dj_static')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (os.getenv('DEBUG') == 'true')

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_yasg',                 # for auto-generated docs (see https://github.com/axnsan12/drf-yasg)
    'corsheaders',              # for enabling traffic proxy from frontend development servers
    'django_celery_beat',
    'accounts',
    'billing'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_server.urls'
AUTH_USER_MODEL = 'accounts.User'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['static', 'static_generated'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'postgres_django',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAdminUser',
    ),

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
}

DRF_RECAPTCHA_SECRET_KEY = ""

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/dj_static/'

MEDIA_URL = '/media/'

# drf-yasg settings
# https://drf-yasg.readthedocs.io/en/stable/settings.html

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
     },
}

# django-cors-headers settings
# https://github.com/adamchainz/django-cors-headers#configuration

CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOW_CREDENTIALS = True

CORS_ORIGIN_WHITELIST = [
    'http://frontend:3000'  # used in docker-compose for frontend-desktop dev server
]

# celery settings
CELERY_BROKER_URL = 'amqp://rabbitmq:5672'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_BEAT_SCHEDULE = {
    'update-users-balance': {
        'task': 'accounts.tasks.update_users_balance',
        'schedule': 300.0,
        'args': tuple(),
    },
    'update-users-models-count': {
        'task': 'accounts.tasks.update_users_models_count',
        'schedule': 301.0,  # let tasks diverge in time
        'args': tuple(),
    }
}
