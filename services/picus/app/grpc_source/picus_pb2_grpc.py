# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import picus_pb2 as picus__pb2


class PicusStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFunctionLogs = channel.unary_unary(
                '/picus.Picus/GetFunctionLogs',
                request_serializer=picus__pb2.GetFunctionLogsRequest.SerializeToString,
                response_deserializer=picus__pb2.GetFunctionLogsReply.FromString,
                )
        self.StreamFunctionLogs = channel.unary_stream(
                '/picus.Picus/StreamFunctionLogs',
                request_serializer=picus__pb2.StreamFunctionLogsRequest.SerializeToString,
                response_deserializer=picus__pb2.LogEntry.FromString,
                )


class PicusServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFunctionLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamFunctionLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PicusServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFunctionLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFunctionLogs,
                    request_deserializer=picus__pb2.GetFunctionLogsRequest.FromString,
                    response_serializer=picus__pb2.GetFunctionLogsReply.SerializeToString,
            ),
            'StreamFunctionLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamFunctionLogs,
                    request_deserializer=picus__pb2.StreamFunctionLogsRequest.FromString,
                    response_serializer=picus__pb2.LogEntry.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'picus.Picus', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Picus(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFunctionLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/picus.Picus/GetFunctionLogs',
            picus__pb2.GetFunctionLogsRequest.SerializeToString,
            picus__pb2.GetFunctionLogsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamFunctionLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/picus.Picus/StreamFunctionLogs',
            picus__pb2.StreamFunctionLogsRequest.SerializeToString,
            picus__pb2.LogEntry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
