// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: selachii.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_selachii_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_selachii_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_selachii_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_selachii_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_selachii_2eproto;
namespace selachii {
class LoadRequest;
class LoadRequestDefaultTypeInternal;
extern LoadRequestDefaultTypeInternal _LoadRequest_default_instance_;
class LoadResponse;
class LoadResponseDefaultTypeInternal;
extern LoadResponseDefaultTypeInternal _LoadResponse_default_instance_;
class ModelMeta;
class ModelMetaDefaultTypeInternal;
extern ModelMetaDefaultTypeInternal _ModelMeta_default_instance_;
class RunRequest;
class RunRequestDefaultTypeInternal;
extern RunRequestDefaultTypeInternal _RunRequest_default_instance_;
class RunResponse;
class RunResponseDefaultTypeInternal;
extern RunResponseDefaultTypeInternal _RunResponse_default_instance_;
class Shape;
class ShapeDefaultTypeInternal;
extern ShapeDefaultTypeInternal _Shape_default_instance_;
class Tensor;
class TensorDefaultTypeInternal;
extern TensorDefaultTypeInternal _Tensor_default_instance_;
class UnloadRequest;
class UnloadRequestDefaultTypeInternal;
extern UnloadRequestDefaultTypeInternal _UnloadRequest_default_instance_;
class UnloadResponse;
class UnloadResponseDefaultTypeInternal;
extern UnloadResponseDefaultTypeInternal _UnloadResponse_default_instance_;
}  // namespace selachii
PROTOBUF_NAMESPACE_OPEN
template<> ::selachii::LoadRequest* Arena::CreateMaybeMessage<::selachii::LoadRequest>(Arena*);
template<> ::selachii::LoadResponse* Arena::CreateMaybeMessage<::selachii::LoadResponse>(Arena*);
template<> ::selachii::ModelMeta* Arena::CreateMaybeMessage<::selachii::ModelMeta>(Arena*);
template<> ::selachii::RunRequest* Arena::CreateMaybeMessage<::selachii::RunRequest>(Arena*);
template<> ::selachii::RunResponse* Arena::CreateMaybeMessage<::selachii::RunResponse>(Arena*);
template<> ::selachii::Shape* Arena::CreateMaybeMessage<::selachii::Shape>(Arena*);
template<> ::selachii::Tensor* Arena::CreateMaybeMessage<::selachii::Tensor>(Arena*);
template<> ::selachii::UnloadRequest* Arena::CreateMaybeMessage<::selachii::UnloadRequest>(Arena*);
template<> ::selachii::UnloadResponse* Arena::CreateMaybeMessage<::selachii::UnloadResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace selachii {

enum ValueType : int {
  UNKNOWN = 0,
  FLOAT16 = 1,
  FLOAT32 = 2,
  FLOAT64 = 3,
  UINT8 = 4,
  UINT16 = 5,
  UINT32 = 6,
  UINT64 = 7,
  INT8 = 8,
  INT16 = 9,
  INT32 = 10,
  INT64 = 11,
  COMPLEX64 = 12,
  COMPLEX128 = 13,
  ValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ValueType_IsValid(int value);
constexpr ValueType ValueType_MIN = UNKNOWN;
constexpr ValueType ValueType_MAX = COMPLEX128;
constexpr int ValueType_ARRAYSIZE = ValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValueType_descriptor();
template<typename T>
inline const std::string& ValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ValueType_descriptor(), enum_t_value);
}
inline bool ValueType_Parse(
    const std::string& name, ValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ValueType>(
    ValueType_descriptor(), name, value);
}
// ===================================================================

class Shape :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:selachii.Shape) */ {
 public:
  Shape();
  virtual ~Shape();

  Shape(const Shape& from);
  Shape(Shape&& from) noexcept
    : Shape() {
    *this = ::std::move(from);
  }

  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shape& operator=(Shape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shape* internal_default_instance() {
    return reinterpret_cast<const Shape*>(
               &_Shape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Shape& a, Shape& b) {
    a.Swap(&b);
  }
  inline void Swap(Shape* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shape* New() const final {
    return CreateMaybeMessage<Shape>(nullptr);
  }

  Shape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "selachii.Shape";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_selachii_2eproto);
    return ::descriptor_table_selachii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated int64 Value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:selachii.Shape)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_selachii_2eproto;
};
// -------------------------------------------------------------------

class Tensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:selachii.Tensor) */ {
 public:
  Tensor();
  virtual ~Tensor();

  Tensor(const Tensor& from);
  Tensor(Tensor&& from) noexcept
    : Tensor() {
    *this = ::std::move(from);
  }

  inline Tensor& operator=(const Tensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tensor& operator=(Tensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tensor* internal_default_instance() {
    return reinterpret_cast<const Tensor*>(
               &_Tensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Tensor& a, Tensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Tensor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tensor* New() const final {
    return CreateMaybeMessage<Tensor>(nullptr);
  }

  Tensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tensor& from);
  void MergeFrom(const Tensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "selachii.Tensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_selachii_2eproto);
    return ::descriptor_table_selachii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kShapeFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes Data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .selachii.Shape Shape = 2;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::selachii::Shape& shape() const;
  ::selachii::Shape* release_shape();
  ::selachii::Shape* mutable_shape();
  void set_allocated_shape(::selachii::Shape* shape);
  private:
  const ::selachii::Shape& _internal_shape() const;
  ::selachii::Shape* _internal_mutable_shape();
  public:

  // .selachii.ValueType Type = 1;
  void clear_type();
  ::selachii::ValueType type() const;
  void set_type(::selachii::ValueType value);
  private:
  ::selachii::ValueType _internal_type() const;
  void _internal_set_type(::selachii::ValueType value);
  public:

  // @@protoc_insertion_point(class_scope:selachii.Tensor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::selachii::Shape* shape_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_selachii_2eproto;
};
// -------------------------------------------------------------------

class ModelMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:selachii.ModelMeta) */ {
 public:
  ModelMeta();
  virtual ~ModelMeta();

  ModelMeta(const ModelMeta& from);
  ModelMeta(ModelMeta&& from) noexcept
    : ModelMeta() {
    *this = ::std::move(from);
  }

  inline ModelMeta& operator=(const ModelMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelMeta& operator=(ModelMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelMeta* internal_default_instance() {
    return reinterpret_cast<const ModelMeta*>(
               &_ModelMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModelMeta& a, ModelMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelMeta* New() const final {
    return CreateMaybeMessage<ModelMeta>(nullptr);
  }

  ModelMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelMeta& from);
  void MergeFrom(const ModelMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "selachii.ModelMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_selachii_2eproto);
    return ::descriptor_table_selachii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputShapeFieldNumber = 2,
    kOutputShapeFieldNumber = 3,
    kIDFieldNumber = 1,
    kPathFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // repeated .selachii.Shape InputShape = 2;
  int inputshape_size() const;
  private:
  int _internal_inputshape_size() const;
  public:
  void clear_inputshape();
  ::selachii::Shape* mutable_inputshape(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Shape >*
      mutable_inputshape();
  private:
  const ::selachii::Shape& _internal_inputshape(int index) const;
  ::selachii::Shape* _internal_add_inputshape();
  public:
  const ::selachii::Shape& inputshape(int index) const;
  ::selachii::Shape* add_inputshape();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Shape >&
      inputshape() const;

  // repeated .selachii.Shape OutputShape = 3;
  int outputshape_size() const;
  private:
  int _internal_outputshape_size() const;
  public:
  void clear_outputshape();
  ::selachii::Shape* mutable_outputshape(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Shape >*
      mutable_outputshape();
  private:
  const ::selachii::Shape& _internal_outputshape(int index) const;
  ::selachii::Shape* _internal_add_outputshape();
  public:
  const ::selachii::Shape& outputshape(int index) const;
  ::selachii::Shape* add_outputshape();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Shape >&
      outputshape() const;

  // string ID = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Path = 4;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // .selachii.ValueType Type = 5;
  void clear_type();
  ::selachii::ValueType type() const;
  void set_type(::selachii::ValueType value);
  private:
  ::selachii::ValueType _internal_type() const;
  void _internal_set_type(::selachii::ValueType value);
  public:

  // @@protoc_insertion_point(class_scope:selachii.ModelMeta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Shape > inputshape_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Shape > outputshape_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_selachii_2eproto;
};
// -------------------------------------------------------------------

class LoadRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:selachii.LoadRequest) */ {
 public:
  LoadRequest();
  virtual ~LoadRequest();

  LoadRequest(const LoadRequest& from);
  LoadRequest(LoadRequest&& from) noexcept
    : LoadRequest() {
    *this = ::std::move(from);
  }

  inline LoadRequest& operator=(const LoadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadRequest& operator=(LoadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadRequest* internal_default_instance() {
    return reinterpret_cast<const LoadRequest*>(
               &_LoadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoadRequest& a, LoadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadRequest* New() const final {
    return CreateMaybeMessage<LoadRequest>(nullptr);
  }

  LoadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadRequest& from);
  void MergeFrom(const LoadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "selachii.LoadRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_selachii_2eproto);
    return ::descriptor_table_selachii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadIDFieldNumber = 2,
    kModelFieldNumber = 1,
  };
  // string LoadID = 2;
  void clear_loadid();
  const std::string& loadid() const;
  void set_loadid(const std::string& value);
  void set_loadid(std::string&& value);
  void set_loadid(const char* value);
  void set_loadid(const char* value, size_t size);
  std::string* mutable_loadid();
  std::string* release_loadid();
  void set_allocated_loadid(std::string* loadid);
  private:
  const std::string& _internal_loadid() const;
  void _internal_set_loadid(const std::string& value);
  std::string* _internal_mutable_loadid();
  public:

  // .selachii.ModelMeta Model = 1;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::selachii::ModelMeta& model() const;
  ::selachii::ModelMeta* release_model();
  ::selachii::ModelMeta* mutable_model();
  void set_allocated_model(::selachii::ModelMeta* model);
  private:
  const ::selachii::ModelMeta& _internal_model() const;
  ::selachii::ModelMeta* _internal_mutable_model();
  public:

  // @@protoc_insertion_point(class_scope:selachii.LoadRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loadid_;
  ::selachii::ModelMeta* model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_selachii_2eproto;
};
// -------------------------------------------------------------------

class UnloadRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:selachii.UnloadRequest) */ {
 public:
  UnloadRequest();
  virtual ~UnloadRequest();

  UnloadRequest(const UnloadRequest& from);
  UnloadRequest(UnloadRequest&& from) noexcept
    : UnloadRequest() {
    *this = ::std::move(from);
  }

  inline UnloadRequest& operator=(const UnloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnloadRequest& operator=(UnloadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnloadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnloadRequest* internal_default_instance() {
    return reinterpret_cast<const UnloadRequest*>(
               &_UnloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UnloadRequest& a, UnloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnloadRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnloadRequest* New() const final {
    return CreateMaybeMessage<UnloadRequest>(nullptr);
  }

  UnloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnloadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnloadRequest& from);
  void MergeFrom(const UnloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnloadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "selachii.UnloadRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_selachii_2eproto);
    return ::descriptor_table_selachii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadIDFieldNumber = 1,
  };
  // string LoadID = 1;
  void clear_loadid();
  const std::string& loadid() const;
  void set_loadid(const std::string& value);
  void set_loadid(std::string&& value);
  void set_loadid(const char* value);
  void set_loadid(const char* value, size_t size);
  std::string* mutable_loadid();
  std::string* release_loadid();
  void set_allocated_loadid(std::string* loadid);
  private:
  const std::string& _internal_loadid() const;
  void _internal_set_loadid(const std::string& value);
  std::string* _internal_mutable_loadid();
  public:

  // @@protoc_insertion_point(class_scope:selachii.UnloadRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loadid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_selachii_2eproto;
};
// -------------------------------------------------------------------

class LoadResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:selachii.LoadResponse) */ {
 public:
  LoadResponse();
  virtual ~LoadResponse();

  LoadResponse(const LoadResponse& from);
  LoadResponse(LoadResponse&& from) noexcept
    : LoadResponse() {
    *this = ::std::move(from);
  }

  inline LoadResponse& operator=(const LoadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadResponse& operator=(LoadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadResponse* internal_default_instance() {
    return reinterpret_cast<const LoadResponse*>(
               &_LoadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoadResponse& a, LoadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadResponse* New() const final {
    return CreateMaybeMessage<LoadResponse>(nullptr);
  }

  LoadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadResponse& from);
  void MergeFrom(const LoadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "selachii.LoadResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_selachii_2eproto);
    return ::descriptor_table_selachii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadIDFieldNumber = 1,
  };
  // string LoadID = 1;
  void clear_loadid();
  const std::string& loadid() const;
  void set_loadid(const std::string& value);
  void set_loadid(std::string&& value);
  void set_loadid(const char* value);
  void set_loadid(const char* value, size_t size);
  std::string* mutable_loadid();
  std::string* release_loadid();
  void set_allocated_loadid(std::string* loadid);
  private:
  const std::string& _internal_loadid() const;
  void _internal_set_loadid(const std::string& value);
  std::string* _internal_mutable_loadid();
  public:

  // @@protoc_insertion_point(class_scope:selachii.LoadResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loadid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_selachii_2eproto;
};
// -------------------------------------------------------------------

class UnloadResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:selachii.UnloadResponse) */ {
 public:
  UnloadResponse();
  virtual ~UnloadResponse();

  UnloadResponse(const UnloadResponse& from);
  UnloadResponse(UnloadResponse&& from) noexcept
    : UnloadResponse() {
    *this = ::std::move(from);
  }

  inline UnloadResponse& operator=(const UnloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnloadResponse& operator=(UnloadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnloadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnloadResponse* internal_default_instance() {
    return reinterpret_cast<const UnloadResponse*>(
               &_UnloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UnloadResponse& a, UnloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnloadResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnloadResponse* New() const final {
    return CreateMaybeMessage<UnloadResponse>(nullptr);
  }

  UnloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnloadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnloadResponse& from);
  void MergeFrom(const UnloadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnloadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "selachii.UnloadResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_selachii_2eproto);
    return ::descriptor_table_selachii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDidChangeFieldNumber = 1,
  };
  // bool DidChange = 1;
  void clear_didchange();
  bool didchange() const;
  void set_didchange(bool value);
  private:
  bool _internal_didchange() const;
  void _internal_set_didchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:selachii.UnloadResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool didchange_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_selachii_2eproto;
};
// -------------------------------------------------------------------

class RunRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:selachii.RunRequest) */ {
 public:
  RunRequest();
  virtual ~RunRequest();

  RunRequest(const RunRequest& from);
  RunRequest(RunRequest&& from) noexcept
    : RunRequest() {
    *this = ::std::move(from);
  }

  inline RunRequest& operator=(const RunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunRequest& operator=(RunRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunRequest* internal_default_instance() {
    return reinterpret_cast<const RunRequest*>(
               &_RunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RunRequest& a, RunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RunRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunRequest* New() const final {
    return CreateMaybeMessage<RunRequest>(nullptr);
  }

  RunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunRequest& from);
  void MergeFrom(const RunRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "selachii.RunRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_selachii_2eproto);
    return ::descriptor_table_selachii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorFieldNumber = 2,
    kLoadIDFieldNumber = 1,
  };
  // repeated .selachii.Tensor Tensor = 2;
  int tensor_size() const;
  private:
  int _internal_tensor_size() const;
  public:
  void clear_tensor();
  ::selachii::Tensor* mutable_tensor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Tensor >*
      mutable_tensor();
  private:
  const ::selachii::Tensor& _internal_tensor(int index) const;
  ::selachii::Tensor* _internal_add_tensor();
  public:
  const ::selachii::Tensor& tensor(int index) const;
  ::selachii::Tensor* add_tensor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Tensor >&
      tensor() const;

  // string LoadID = 1;
  void clear_loadid();
  const std::string& loadid() const;
  void set_loadid(const std::string& value);
  void set_loadid(std::string&& value);
  void set_loadid(const char* value);
  void set_loadid(const char* value, size_t size);
  std::string* mutable_loadid();
  std::string* release_loadid();
  void set_allocated_loadid(std::string* loadid);
  private:
  const std::string& _internal_loadid() const;
  void _internal_set_loadid(const std::string& value);
  std::string* _internal_mutable_loadid();
  public:

  // @@protoc_insertion_point(class_scope:selachii.RunRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Tensor > tensor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loadid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_selachii_2eproto;
};
// -------------------------------------------------------------------

class RunResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:selachii.RunResponse) */ {
 public:
  RunResponse();
  virtual ~RunResponse();

  RunResponse(const RunResponse& from);
  RunResponse(RunResponse&& from) noexcept
    : RunResponse() {
    *this = ::std::move(from);
  }

  inline RunResponse& operator=(const RunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunResponse& operator=(RunResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunResponse* internal_default_instance() {
    return reinterpret_cast<const RunResponse*>(
               &_RunResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RunResponse& a, RunResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RunResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunResponse* New() const final {
    return CreateMaybeMessage<RunResponse>(nullptr);
  }

  RunResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunResponse& from);
  void MergeFrom(const RunResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "selachii.RunResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_selachii_2eproto);
    return ::descriptor_table_selachii_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorFieldNumber = 1,
  };
  // repeated .selachii.Tensor Tensor = 1;
  int tensor_size() const;
  private:
  int _internal_tensor_size() const;
  public:
  void clear_tensor();
  ::selachii::Tensor* mutable_tensor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Tensor >*
      mutable_tensor();
  private:
  const ::selachii::Tensor& _internal_tensor(int index) const;
  ::selachii::Tensor* _internal_add_tensor();
  public:
  const ::selachii::Tensor& tensor(int index) const;
  ::selachii::Tensor* add_tensor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Tensor >&
      tensor() const;

  // @@protoc_insertion_point(class_scope:selachii.RunResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Tensor > tensor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_selachii_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Shape

// repeated int64 Value = 1;
inline int Shape::_internal_value_size() const {
  return value_.size();
}
inline int Shape::value_size() const {
  return _internal_value_size();
}
inline void Shape::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Shape::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Shape::value(int index) const {
  // @@protoc_insertion_point(field_get:selachii.Shape.Value)
  return _internal_value(index);
}
inline void Shape::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:selachii.Shape.Value)
}
inline void Shape::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  value_.Add(value);
}
inline void Shape::add_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:selachii.Shape.Value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Shape::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Shape::value() const {
  // @@protoc_insertion_point(field_list:selachii.Shape.Value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Shape::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Shape::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:selachii.Shape.Value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// Tensor

// .selachii.ValueType Type = 1;
inline void Tensor::clear_type() {
  type_ = 0;
}
inline ::selachii::ValueType Tensor::_internal_type() const {
  return static_cast< ::selachii::ValueType >(type_);
}
inline ::selachii::ValueType Tensor::type() const {
  // @@protoc_insertion_point(field_get:selachii.Tensor.Type)
  return _internal_type();
}
inline void Tensor::_internal_set_type(::selachii::ValueType value) {
  
  type_ = value;
}
inline void Tensor::set_type(::selachii::ValueType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:selachii.Tensor.Type)
}

// .selachii.Shape Shape = 2;
inline bool Tensor::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool Tensor::has_shape() const {
  return _internal_has_shape();
}
inline void Tensor::clear_shape() {
  if (GetArenaNoVirtual() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
inline const ::selachii::Shape& Tensor::_internal_shape() const {
  const ::selachii::Shape* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::selachii::Shape*>(
      &::selachii::_Shape_default_instance_);
}
inline const ::selachii::Shape& Tensor::shape() const {
  // @@protoc_insertion_point(field_get:selachii.Tensor.Shape)
  return _internal_shape();
}
inline ::selachii::Shape* Tensor::release_shape() {
  // @@protoc_insertion_point(field_release:selachii.Tensor.Shape)
  
  ::selachii::Shape* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::selachii::Shape* Tensor::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::selachii::Shape>(GetArenaNoVirtual());
    shape_ = p;
  }
  return shape_;
}
inline ::selachii::Shape* Tensor::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:selachii.Tensor.Shape)
  return _internal_mutable_shape();
}
inline void Tensor::set_allocated_shape(::selachii::Shape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:selachii.Tensor.Shape)
}

// bytes Data = 3;
inline void Tensor::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tensor::data() const {
  // @@protoc_insertion_point(field_get:selachii.Tensor.Data)
  return _internal_data();
}
inline void Tensor::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:selachii.Tensor.Data)
}
inline std::string* Tensor::mutable_data() {
  // @@protoc_insertion_point(field_mutable:selachii.Tensor.Data)
  return _internal_mutable_data();
}
inline const std::string& Tensor::_internal_data() const {
  return data_.GetNoArena();
}
inline void Tensor::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tensor::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:selachii.Tensor.Data)
}
inline void Tensor::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:selachii.Tensor.Data)
}
inline void Tensor::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:selachii.Tensor.Data)
}
inline std::string* Tensor::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tensor::release_data() {
  // @@protoc_insertion_point(field_release:selachii.Tensor.Data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tensor::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:selachii.Tensor.Data)
}

// -------------------------------------------------------------------

// ModelMeta

// string ID = 1;
inline void ModelMeta::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelMeta::id() const {
  // @@protoc_insertion_point(field_get:selachii.ModelMeta.ID)
  return _internal_id();
}
inline void ModelMeta::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:selachii.ModelMeta.ID)
}
inline std::string* ModelMeta::mutable_id() {
  // @@protoc_insertion_point(field_mutable:selachii.ModelMeta.ID)
  return _internal_mutable_id();
}
inline const std::string& ModelMeta::_internal_id() const {
  return id_.GetNoArena();
}
inline void ModelMeta::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelMeta::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:selachii.ModelMeta.ID)
}
inline void ModelMeta::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:selachii.ModelMeta.ID)
}
inline void ModelMeta::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:selachii.ModelMeta.ID)
}
inline std::string* ModelMeta::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelMeta::release_id() {
  // @@protoc_insertion_point(field_release:selachii.ModelMeta.ID)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelMeta::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:selachii.ModelMeta.ID)
}

// repeated .selachii.Shape InputShape = 2;
inline int ModelMeta::_internal_inputshape_size() const {
  return inputshape_.size();
}
inline int ModelMeta::inputshape_size() const {
  return _internal_inputshape_size();
}
inline void ModelMeta::clear_inputshape() {
  inputshape_.Clear();
}
inline ::selachii::Shape* ModelMeta::mutable_inputshape(int index) {
  // @@protoc_insertion_point(field_mutable:selachii.ModelMeta.InputShape)
  return inputshape_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Shape >*
ModelMeta::mutable_inputshape() {
  // @@protoc_insertion_point(field_mutable_list:selachii.ModelMeta.InputShape)
  return &inputshape_;
}
inline const ::selachii::Shape& ModelMeta::_internal_inputshape(int index) const {
  return inputshape_.Get(index);
}
inline const ::selachii::Shape& ModelMeta::inputshape(int index) const {
  // @@protoc_insertion_point(field_get:selachii.ModelMeta.InputShape)
  return _internal_inputshape(index);
}
inline ::selachii::Shape* ModelMeta::_internal_add_inputshape() {
  return inputshape_.Add();
}
inline ::selachii::Shape* ModelMeta::add_inputshape() {
  // @@protoc_insertion_point(field_add:selachii.ModelMeta.InputShape)
  return _internal_add_inputshape();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Shape >&
ModelMeta::inputshape() const {
  // @@protoc_insertion_point(field_list:selachii.ModelMeta.InputShape)
  return inputshape_;
}

// repeated .selachii.Shape OutputShape = 3;
inline int ModelMeta::_internal_outputshape_size() const {
  return outputshape_.size();
}
inline int ModelMeta::outputshape_size() const {
  return _internal_outputshape_size();
}
inline void ModelMeta::clear_outputshape() {
  outputshape_.Clear();
}
inline ::selachii::Shape* ModelMeta::mutable_outputshape(int index) {
  // @@protoc_insertion_point(field_mutable:selachii.ModelMeta.OutputShape)
  return outputshape_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Shape >*
ModelMeta::mutable_outputshape() {
  // @@protoc_insertion_point(field_mutable_list:selachii.ModelMeta.OutputShape)
  return &outputshape_;
}
inline const ::selachii::Shape& ModelMeta::_internal_outputshape(int index) const {
  return outputshape_.Get(index);
}
inline const ::selachii::Shape& ModelMeta::outputshape(int index) const {
  // @@protoc_insertion_point(field_get:selachii.ModelMeta.OutputShape)
  return _internal_outputshape(index);
}
inline ::selachii::Shape* ModelMeta::_internal_add_outputshape() {
  return outputshape_.Add();
}
inline ::selachii::Shape* ModelMeta::add_outputshape() {
  // @@protoc_insertion_point(field_add:selachii.ModelMeta.OutputShape)
  return _internal_add_outputshape();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Shape >&
ModelMeta::outputshape() const {
  // @@protoc_insertion_point(field_list:selachii.ModelMeta.OutputShape)
  return outputshape_;
}

// string Path = 4;
inline void ModelMeta::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelMeta::path() const {
  // @@protoc_insertion_point(field_get:selachii.ModelMeta.Path)
  return _internal_path();
}
inline void ModelMeta::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:selachii.ModelMeta.Path)
}
inline std::string* ModelMeta::mutable_path() {
  // @@protoc_insertion_point(field_mutable:selachii.ModelMeta.Path)
  return _internal_mutable_path();
}
inline const std::string& ModelMeta::_internal_path() const {
  return path_.GetNoArena();
}
inline void ModelMeta::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelMeta::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:selachii.ModelMeta.Path)
}
inline void ModelMeta::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:selachii.ModelMeta.Path)
}
inline void ModelMeta::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:selachii.ModelMeta.Path)
}
inline std::string* ModelMeta::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelMeta::release_path() {
  // @@protoc_insertion_point(field_release:selachii.ModelMeta.Path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelMeta::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:selachii.ModelMeta.Path)
}

// .selachii.ValueType Type = 5;
inline void ModelMeta::clear_type() {
  type_ = 0;
}
inline ::selachii::ValueType ModelMeta::_internal_type() const {
  return static_cast< ::selachii::ValueType >(type_);
}
inline ::selachii::ValueType ModelMeta::type() const {
  // @@protoc_insertion_point(field_get:selachii.ModelMeta.Type)
  return _internal_type();
}
inline void ModelMeta::_internal_set_type(::selachii::ValueType value) {
  
  type_ = value;
}
inline void ModelMeta::set_type(::selachii::ValueType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:selachii.ModelMeta.Type)
}

// -------------------------------------------------------------------

// LoadRequest

// .selachii.ModelMeta Model = 1;
inline bool LoadRequest::_internal_has_model() const {
  return this != internal_default_instance() && model_ != nullptr;
}
inline bool LoadRequest::has_model() const {
  return _internal_has_model();
}
inline void LoadRequest::clear_model() {
  if (GetArenaNoVirtual() == nullptr && model_ != nullptr) {
    delete model_;
  }
  model_ = nullptr;
}
inline const ::selachii::ModelMeta& LoadRequest::_internal_model() const {
  const ::selachii::ModelMeta* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::selachii::ModelMeta*>(
      &::selachii::_ModelMeta_default_instance_);
}
inline const ::selachii::ModelMeta& LoadRequest::model() const {
  // @@protoc_insertion_point(field_get:selachii.LoadRequest.Model)
  return _internal_model();
}
inline ::selachii::ModelMeta* LoadRequest::release_model() {
  // @@protoc_insertion_point(field_release:selachii.LoadRequest.Model)
  
  ::selachii::ModelMeta* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::selachii::ModelMeta* LoadRequest::_internal_mutable_model() {
  
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::selachii::ModelMeta>(GetArenaNoVirtual());
    model_ = p;
  }
  return model_;
}
inline ::selachii::ModelMeta* LoadRequest::mutable_model() {
  // @@protoc_insertion_point(field_mutable:selachii.LoadRequest.Model)
  return _internal_mutable_model();
}
inline void LoadRequest::set_allocated_model(::selachii::ModelMeta* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete model_;
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    
  } else {
    
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:selachii.LoadRequest.Model)
}

// string LoadID = 2;
inline void LoadRequest::clear_loadid() {
  loadid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoadRequest::loadid() const {
  // @@protoc_insertion_point(field_get:selachii.LoadRequest.LoadID)
  return _internal_loadid();
}
inline void LoadRequest::set_loadid(const std::string& value) {
  _internal_set_loadid(value);
  // @@protoc_insertion_point(field_set:selachii.LoadRequest.LoadID)
}
inline std::string* LoadRequest::mutable_loadid() {
  // @@protoc_insertion_point(field_mutable:selachii.LoadRequest.LoadID)
  return _internal_mutable_loadid();
}
inline const std::string& LoadRequest::_internal_loadid() const {
  return loadid_.GetNoArena();
}
inline void LoadRequest::_internal_set_loadid(const std::string& value) {
  
  loadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoadRequest::set_loadid(std::string&& value) {
  
  loadid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:selachii.LoadRequest.LoadID)
}
inline void LoadRequest::set_loadid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:selachii.LoadRequest.LoadID)
}
inline void LoadRequest::set_loadid(const char* value, size_t size) {
  
  loadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:selachii.LoadRequest.LoadID)
}
inline std::string* LoadRequest::_internal_mutable_loadid() {
  
  return loadid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoadRequest::release_loadid() {
  // @@protoc_insertion_point(field_release:selachii.LoadRequest.LoadID)
  
  return loadid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoadRequest::set_allocated_loadid(std::string* loadid) {
  if (loadid != nullptr) {
    
  } else {
    
  }
  loadid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loadid);
  // @@protoc_insertion_point(field_set_allocated:selachii.LoadRequest.LoadID)
}

// -------------------------------------------------------------------

// UnloadRequest

// string LoadID = 1;
inline void UnloadRequest::clear_loadid() {
  loadid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UnloadRequest::loadid() const {
  // @@protoc_insertion_point(field_get:selachii.UnloadRequest.LoadID)
  return _internal_loadid();
}
inline void UnloadRequest::set_loadid(const std::string& value) {
  _internal_set_loadid(value);
  // @@protoc_insertion_point(field_set:selachii.UnloadRequest.LoadID)
}
inline std::string* UnloadRequest::mutable_loadid() {
  // @@protoc_insertion_point(field_mutable:selachii.UnloadRequest.LoadID)
  return _internal_mutable_loadid();
}
inline const std::string& UnloadRequest::_internal_loadid() const {
  return loadid_.GetNoArena();
}
inline void UnloadRequest::_internal_set_loadid(const std::string& value) {
  
  loadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UnloadRequest::set_loadid(std::string&& value) {
  
  loadid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:selachii.UnloadRequest.LoadID)
}
inline void UnloadRequest::set_loadid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:selachii.UnloadRequest.LoadID)
}
inline void UnloadRequest::set_loadid(const char* value, size_t size) {
  
  loadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:selachii.UnloadRequest.LoadID)
}
inline std::string* UnloadRequest::_internal_mutable_loadid() {
  
  return loadid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UnloadRequest::release_loadid() {
  // @@protoc_insertion_point(field_release:selachii.UnloadRequest.LoadID)
  
  return loadid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UnloadRequest::set_allocated_loadid(std::string* loadid) {
  if (loadid != nullptr) {
    
  } else {
    
  }
  loadid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loadid);
  // @@protoc_insertion_point(field_set_allocated:selachii.UnloadRequest.LoadID)
}

// -------------------------------------------------------------------

// LoadResponse

// string LoadID = 1;
inline void LoadResponse::clear_loadid() {
  loadid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoadResponse::loadid() const {
  // @@protoc_insertion_point(field_get:selachii.LoadResponse.LoadID)
  return _internal_loadid();
}
inline void LoadResponse::set_loadid(const std::string& value) {
  _internal_set_loadid(value);
  // @@protoc_insertion_point(field_set:selachii.LoadResponse.LoadID)
}
inline std::string* LoadResponse::mutable_loadid() {
  // @@protoc_insertion_point(field_mutable:selachii.LoadResponse.LoadID)
  return _internal_mutable_loadid();
}
inline const std::string& LoadResponse::_internal_loadid() const {
  return loadid_.GetNoArena();
}
inline void LoadResponse::_internal_set_loadid(const std::string& value) {
  
  loadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoadResponse::set_loadid(std::string&& value) {
  
  loadid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:selachii.LoadResponse.LoadID)
}
inline void LoadResponse::set_loadid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:selachii.LoadResponse.LoadID)
}
inline void LoadResponse::set_loadid(const char* value, size_t size) {
  
  loadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:selachii.LoadResponse.LoadID)
}
inline std::string* LoadResponse::_internal_mutable_loadid() {
  
  return loadid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoadResponse::release_loadid() {
  // @@protoc_insertion_point(field_release:selachii.LoadResponse.LoadID)
  
  return loadid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoadResponse::set_allocated_loadid(std::string* loadid) {
  if (loadid != nullptr) {
    
  } else {
    
  }
  loadid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loadid);
  // @@protoc_insertion_point(field_set_allocated:selachii.LoadResponse.LoadID)
}

// -------------------------------------------------------------------

// UnloadResponse

// bool DidChange = 1;
inline void UnloadResponse::clear_didchange() {
  didchange_ = false;
}
inline bool UnloadResponse::_internal_didchange() const {
  return didchange_;
}
inline bool UnloadResponse::didchange() const {
  // @@protoc_insertion_point(field_get:selachii.UnloadResponse.DidChange)
  return _internal_didchange();
}
inline void UnloadResponse::_internal_set_didchange(bool value) {
  
  didchange_ = value;
}
inline void UnloadResponse::set_didchange(bool value) {
  _internal_set_didchange(value);
  // @@protoc_insertion_point(field_set:selachii.UnloadResponse.DidChange)
}

// -------------------------------------------------------------------

// RunRequest

// string LoadID = 1;
inline void RunRequest::clear_loadid() {
  loadid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RunRequest::loadid() const {
  // @@protoc_insertion_point(field_get:selachii.RunRequest.LoadID)
  return _internal_loadid();
}
inline void RunRequest::set_loadid(const std::string& value) {
  _internal_set_loadid(value);
  // @@protoc_insertion_point(field_set:selachii.RunRequest.LoadID)
}
inline std::string* RunRequest::mutable_loadid() {
  // @@protoc_insertion_point(field_mutable:selachii.RunRequest.LoadID)
  return _internal_mutable_loadid();
}
inline const std::string& RunRequest::_internal_loadid() const {
  return loadid_.GetNoArena();
}
inline void RunRequest::_internal_set_loadid(const std::string& value) {
  
  loadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RunRequest::set_loadid(std::string&& value) {
  
  loadid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:selachii.RunRequest.LoadID)
}
inline void RunRequest::set_loadid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:selachii.RunRequest.LoadID)
}
inline void RunRequest::set_loadid(const char* value, size_t size) {
  
  loadid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:selachii.RunRequest.LoadID)
}
inline std::string* RunRequest::_internal_mutable_loadid() {
  
  return loadid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RunRequest::release_loadid() {
  // @@protoc_insertion_point(field_release:selachii.RunRequest.LoadID)
  
  return loadid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RunRequest::set_allocated_loadid(std::string* loadid) {
  if (loadid != nullptr) {
    
  } else {
    
  }
  loadid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loadid);
  // @@protoc_insertion_point(field_set_allocated:selachii.RunRequest.LoadID)
}

// repeated .selachii.Tensor Tensor = 2;
inline int RunRequest::_internal_tensor_size() const {
  return tensor_.size();
}
inline int RunRequest::tensor_size() const {
  return _internal_tensor_size();
}
inline void RunRequest::clear_tensor() {
  tensor_.Clear();
}
inline ::selachii::Tensor* RunRequest::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:selachii.RunRequest.Tensor)
  return tensor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Tensor >*
RunRequest::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:selachii.RunRequest.Tensor)
  return &tensor_;
}
inline const ::selachii::Tensor& RunRequest::_internal_tensor(int index) const {
  return tensor_.Get(index);
}
inline const ::selachii::Tensor& RunRequest::tensor(int index) const {
  // @@protoc_insertion_point(field_get:selachii.RunRequest.Tensor)
  return _internal_tensor(index);
}
inline ::selachii::Tensor* RunRequest::_internal_add_tensor() {
  return tensor_.Add();
}
inline ::selachii::Tensor* RunRequest::add_tensor() {
  // @@protoc_insertion_point(field_add:selachii.RunRequest.Tensor)
  return _internal_add_tensor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Tensor >&
RunRequest::tensor() const {
  // @@protoc_insertion_point(field_list:selachii.RunRequest.Tensor)
  return tensor_;
}

// -------------------------------------------------------------------

// RunResponse

// repeated .selachii.Tensor Tensor = 1;
inline int RunResponse::_internal_tensor_size() const {
  return tensor_.size();
}
inline int RunResponse::tensor_size() const {
  return _internal_tensor_size();
}
inline void RunResponse::clear_tensor() {
  tensor_.Clear();
}
inline ::selachii::Tensor* RunResponse::mutable_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:selachii.RunResponse.Tensor)
  return tensor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Tensor >*
RunResponse::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable_list:selachii.RunResponse.Tensor)
  return &tensor_;
}
inline const ::selachii::Tensor& RunResponse::_internal_tensor(int index) const {
  return tensor_.Get(index);
}
inline const ::selachii::Tensor& RunResponse::tensor(int index) const {
  // @@protoc_insertion_point(field_get:selachii.RunResponse.Tensor)
  return _internal_tensor(index);
}
inline ::selachii::Tensor* RunResponse::_internal_add_tensor() {
  return tensor_.Add();
}
inline ::selachii::Tensor* RunResponse::add_tensor() {
  // @@protoc_insertion_point(field_add:selachii.RunResponse.Tensor)
  return _internal_add_tensor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::selachii::Tensor >&
RunResponse::tensor() const {
  // @@protoc_insertion_point(field_list:selachii.RunResponse.Tensor)
  return tensor_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace selachii

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::selachii::ValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::selachii::ValueType>() {
  return ::selachii::ValueType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_selachii_2eproto
